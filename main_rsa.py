import base64
import os
import sys

import my_rsa
from my_rsa import utils


# pubkey, privkey = my_rsa.key.new_keys(512)
# privkey.export_pkcs("rsapriv.DER")
# pubkey.export_pkcs("prsapub.DER")
# message = "üé≤ roll the bones üé≤"
#
# pubkey = my_rsa.key.PublicKey.import_pkcs('prsapub.DER')
# encrypted = my_rsa.RSA.RSA.encrypt(message, pubkey)
# print(encrypted)
# print(base64.b64encode(encrypted.encode()).decode('utf-8'))
#
#
# privkey = my_rsa.key.PrivateKey.import_pkcs('rsapriv.DER')
# dec = my_rsa.RSA.RSA.decrypt(encrypted, privkey)
# print(dec)


def test_key_creations():
    pubkey, privkey = my_rsa.key.new_keys(512)
    pubkey.export_pkcs(f"keys/test_pub.DER")
    privkey.export_pkcs(f"keys/test_priv.DER")
    return True


def test_encrypt():
    pubkey = my_rsa.key.PublicKey.import_pkcs(f"keys/test_pub.DER")
    message = utils.load_message('test2.txt')
    encrypted = my_rsa.RSA.RSA2.encrypt(message, pubkey)
    print(encrypted)
    utils.save_message(encrypted, 'test')
    return True


def test_decrypt():
    priv = my_rsa.key.PrivateKey.import_pkcs(f"keys/test_priv.DER")
    encrypted = utils.load_message('test')
    dec = my_rsa.RSA.RSA2.decrypt(encrypted, priv)
    print(dec)
    return True


#assert test_key_creations() == True
assert test_encrypt() == True
assert test_decrypt() == True

sys.exit(0)

print("Welcome to my RSA implementation")
while True:
    action = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n1-–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏\n2-–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n3-–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n4-–í—ã—Ö–æ–¥\n")
    if action not in ("1", "2", "3", "4"):
        print("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")
        continue

    if action == '4':
        sys.exit(0)

    if action == '1':
        try:
            keysize = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–µ–π: 64/128/256/512/1024/2048\n"))
        except ValueError:
            print("–û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–µ–π")
            sys.exit(-1)
        if keysize not in (64, 128, 256, 512, 1024, 2048):
            print("–û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–µ–π")
            sys.exit(-1)
        pubkey, privkey = my_rsa.key.new_keys(keysize)
        keyholder = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π: ")
        pubkey.export_pkcs(f"keys/{keyholder}_pub.DER")
        privkey.export_pkcs(f"keys/{keyholder}_priv.DER")
        print("–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    elif action == '2':
        text_action = input("–ö–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n1-–ò–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n2-–ò–∑ —Ñ–∞–π–ª–∞\n")
        while text_action not in ("1", "2"):
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            text_action = input("–ö–∞–∫ –±—É–¥–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n1-–ò–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n2-–ò–∑ —Ñ–∞–π–ª–∞\n")
        if text_action == '1':
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n")
        if text_action == '2':
            file = input("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: ")
            message = utils.load_message(file)
        print("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫–µ keys)")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(filter(lambda x: 'pub' in x, os.listdir('keys')))}")
        keyfile = input()
        pubkey = my_rsa.key.PublicKey.import_pkcs(f"keys/{keyfile}")
        encrypted = my_rsa.RSA.RSA2.encrypt(message, pubkey)
        print(encrypted)
        save_action = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?(yes/no)")
        while save_action not in ("yes", "no"):
            save_action = input("–í–≤–µ–¥–∏—Ç–µ yes –∏–ª–∏ no")
        if save_action == "yes":
            message_file = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ")
            utils.save_message(encrypted, message_file)
    elif action == '3':
        print("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫–µ keys)")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(filter(lambda x: 'priv' in x, os.listdir('keys')))}")
        keyfile = input()
        encrypted_file = input("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: ")
        encrypted = utils.load_message(encrypted_file)
        privkey = my_rsa.key.PrivateKey.import_pkcs(f"keys/{keyfile}")
        dec = my_rsa.RSA.RSA2.decrypt(encrypted, privkey)
        print(dec)
